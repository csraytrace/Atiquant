import numpy as np
from Nachbau_ati_sauber.packages.Massenschwächungskoeffizient import Massenschwächungskoeffizient
from Nachbau_ati_sauber.packages.Auslesen import Datenauslesen
from Nachbau_ati_sauber.Röhre import Röhre
import matplotlib.pyplot as plt
from Nachbau_ati_sauber.Element import Element
from Nachbau_ati_sauber.Detektor import Detektor
from Nachbau_ati_sauber.Calc_I import Calc_I
from Nachbau_ati_sauber.ASR_auslese import All_asr_files

#1, 0.9, 0.5


geo = [(1.2755978351345264e-05, 22.102955679764456, 'Ag'), (1.7180731880452694e-05, 1.487, 'Al'), (5.696537924278731e-06, 23.10792994876348, 'Cd'), (2.4865052618180097e-05, 8.041215748748293, 'Cu'), (2.9199495694963214e-06, 1.255, 'Mg'), (2.136069804629638e-05, 1.739334980440601, 'Si'), (2.9406066249417355e-05, 4.507980015896446, 'Ti'), (2.7842676018392986e-05, 4.949304535637149, 'V'), (2.526128414976023e-05, 8.631189867640346, 'Zn'), (2.2557194658722488e-05, 15.746151182987512, 'Zr'), (2.7974364160346087e-05, 22.102955679764456, 'Ag'), (2.008292669486116e-05, 1.487, 'Al'), (2.8024104846810228e-05, 23.10792994876348, 'Cd'), (2.6601023531216985e-05, 8.041215748748293, 'Cu'), (3.155719995567875e-06, 1.255, 'Mg'), (2.4850581234781094e-05, 1.739334980440601, 'Si'), (3.088955655380788e-05, 4.507980015896446, 'Ti'), (2.9357045523802037e-05, 4.949304535637149, 'V'), (2.7289362849794637e-05, 8.631189867640346, 'Zn'), (2.8447241364671868e-05, 15.746151182987512, 'Zr'), (2.4802825964045407e-05, 22.102955679764456, 'Ag'), (1.8925842950206177e-05, 1.487, 'Al'), (2.367881284383132e-05, 23.10792994876348, 'Cd'), (2.6458313530667428e-05, 8.041215748748293, 'Cu'), (3.0874216079020884e-06, 1.255, 'Mg'), (2.3808940608645944e-05, 1.739334980440601, 'Si'), (3.1399673057169245e-05, 4.507980015896446, 'Ti'), (2.9746812591637173e-05, 4.949304535637149, 'V'), (2.6851601011534995e-05, 8.631189867640346, 'Zn'), (2.664151362178654e-05, 15.746151182987512, 'Zr')]

#geo = [(1.2755978351345264e-05, 22.102955679764456, 'Ag'), (1.8688831013247e-05, 1.487, 'Al'), (5.696537924278731e-06, 23.10792994876348, 'Cd'), (2.496432297094448e-05, 8.041215748748293, 'Cu'), (3.1821264280756084e-06, 1.255, 'Mg'), (2.3197209907173496e-05, 1.739334980440601, 'Si'), (2.9435974969525095e-05, 4.507980015896446, 'Ti'), (2.7876841689880125e-05, 4.949304535637149, 'V'), (2.5380769863011937e-05, 8.631189867640346, 'Zn'), (2.3107028962050844e-05, 15.746151182987512, 'Zr'), (2.7974364160346087e-05, 22.102955679764456, 'Ag'), (2.1816038017793702e-05, 1.487, 'Al'), (2.8024104846810228e-05, 23.10792994876348, 'Cd'), (2.688959211433062e-05, 8.041215748748293, 'Cu'), (3.4354404796640583e-06, 1.255, 'Mg'), (2.694201165502913e-05, 1.739334980440601, 'Si'), (3.099870147026591e-05, 4.507980015896446, 'Ti'), (2.9478179591126958e-05, 4.949304535637149, 'V'), (2.76276252510933e-05, 8.631189867640346, 'Zn'), (2.9517006388034858e-05, 15.746151182987512, 'Zr'), (2.4802825964045407e-05, 22.102955679764456, 'Ag'), (2.057702063500683e-05, 1.487, 'Al'), (2.367881284383132e-05, 23.10792994876348, 'Cd'), (2.666282626552409e-05, 8.041215748748293, 'Cu'), (3.3634791481478113e-06, 1.255, 'Mg'), (2.5839290155439403e-05, 1.739334980440601, 'Si'), (3.147060387143776e-05, 4.507980015896446, 'Ti'), (2.982643415541162e-05, 4.949304535637149, 'V'), (2.709237022717537e-05, 8.631189867640346, 'Zn'), (2.7521288266941387e-05, 15.746151182987512, 'Zr')]
#geo = [(1.2755978351345264e-05, 22.102955679764456, 'Ag'), (2.8801411577429345e-05, 1.487, 'Al'), (5.696537924278731e-06, 23.10792994876348, 'Cd'), (2.5369459486247896e-05, 8.041215748748293, 'Cu'), (4.9654977937168746e-06, 1.255, 'Mg'), (3.535647162299702e-05, 1.739334980440601, 'Si'), (2.9556220734585334e-05, 4.507980015896446, 'Ti'), (2.8014347003812816e-05, 4.949304535637149, 'V'), (2.5870234032293522e-05, 8.631189867640346, 'Zn'), (2.5603369690520284e-05, 15.746151182987512, 'Zr'), (2.7974364160346087e-05, 22.102955679764456, 'Ag'), (3.3316642855321e-05, 1.487, 'Al'), (2.8024104846810228e-05, 23.10792994876348, 'Cd'), (2.810931435646494e-05, 8.041215748748293, 'Cu'), (5.322606854472762e-06, 1.255, 'Mg'), (4.061451946721836e-05, 1.739334980440601, 'Si'), (3.1443104747452964e-05, 4.507980015896446, 'Ti'), (2.9972880174263975e-05, 4.949304535637149, 'V'), (2.9068907482917073e-05, 8.631189867640346, 'Zn'), (3.474309447036879e-05, 15.746151182987512, 'Zr'), (2.4802825964045407e-05, 22.102955679764456, 'Ag'), (3.160727879971112e-05, 1.487, 'Al'), (2.367881284383132e-05, 23.10792994876348, 'Cd'), (2.7513502033631598e-05, 8.041215748748293, 'Cu'), (5.236245958932257e-06, 1.255, 'Mg'), (3.9216220626015475e-05, 1.739334980440601, 'Si'), (3.175756095582229e-05, 4.507980015896446, 'Ti'), (3.0149228907938325e-05, 4.949304535637149, 'V'), (2.81002312689095e-05, 8.631189867640346, 'Zn'), (3.170987005238982e-05, 15.746151182987512, 'Zr')]
#geo mit spannung auf 28V
geo = [(3.8976033253536705e-05, 22.102955679764456, 'Ag'), (1.7607975663023103e-05, 1.487, 'Al'), (3.446659483169364e-05, 23.10792994876348, 'Cd'), (2.8955209395974484e-05, 8.041215748748293, 'Cu'), (2.9905095800352866e-06, 1.255, 'Mg'), (2.190871597952811e-05, 1.739334980440601, 'Si'), (3.203690391320342e-05, 4.507980015896446, 'Ti'), (3.059222351376892e-05, 4.949304535637149, 'V'), (2.9745208145369048e-05, 8.631189867640346, 'Zn'), (3.294712489626655e-05, 15.746151182987512, 'Zr'), (2.7974364160346087e-05, 22.102955679764456, 'Ag'), (2.008292669486116e-05, 1.487, 'Al'), (2.8024104846810228e-05, 23.10792994876348, 'Cd'), (2.6601023531216985e-05, 8.041215748748293, 'Cu'), (3.155719995567875e-06, 1.255, 'Mg'), (2.4850581234781094e-05, 1.739334980440601, 'Si'), (3.088955655380788e-05, 4.507980015896446, 'Ti'), (2.9357045523802037e-05, 4.949304535637149, 'V'), (2.7289362849794637e-05, 8.631189867640346, 'Zn'), (2.8447241364671868e-05, 15.746151182987512, 'Zr'), (2.4802825964045407e-05, 22.102955679764456, 'Ag'), (1.8925842950206177e-05, 1.487, 'Al'), (2.367881284383132e-05, 23.10792994876348, 'Cd'), (2.6458313530667428e-05, 8.041215748748293, 'Cu'), (3.0874216079020884e-06, 1.255, 'Mg'), (2.3808940608645944e-05, 1.739334980440601, 'Si'), (3.1399673057169245e-05, 4.507980015896446, 'Ti'), (2.9746812591637173e-05, 4.949304535637149, 'V'), (2.6851601011534995e-05, 8.631189867640346, 'Zn'), (2.664151362178654e-05, 15.746151182987512, 'Zr')]

x_werte = []
y_werte = []
for i in range(len(geo)):
    x_werte.append(geo[i][1])
    y_werte.append(geo[i][0])


plt.plot(x_werte[0:10],y_werte[0:10], 'o',markersize=2,color="b", label='Geometriefaktoren 30keV')
plt.plot(x_werte[10:20],y_werte[10:20], 'o',markersize=2,color="r", label='Geometriefaktoren 40keV')
plt.plot(x_werte[20:30],y_werte[20:30], 'o',markersize=2,color="g", label='Geometriefaktoren 35keV')

for i in range(10):
    plt.annotate(geo[i][2], (geo[i][1], geo[i][0]*1.1), xytext=(0,10), textcoords="offset points")
    #plt.annotate(geo[i][2], (i, wert), textcoords="offset points", xytext=(0,5), ha='center', fontsize=8, color='blue')


 #ax2.annotate(element[0], (find_Ubergang(El.Ubergange(), " K-L3") , element[1] * Faktor), textcoords="offset points", xytext=(0,10), ha='center')
def Geo_liste(array):
    geo_list = []
    for i in array:
        geo_list.append(i[0])
    return np.array(geo_list)

def Abweichung(geo_list):
    mittelwert = geo_list.mean()
    abweichung = 0
    for i in geo_list:
        abweichung += abs(i - mittelwert)
    return abweichung / len(geo_list)


geo_list = Geo_liste((geo))
print(geo_list.mean())
print(Abweichung(geo_list))

plt.xlabel('Energie [keV]')
plt.ylabel('Geometriefaktor')
plt.legend()
#plt.title('Daten und horizontale Linie beim Mittelwert')
plt.show()
